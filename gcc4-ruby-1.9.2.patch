diff -aur rudl-0.8/flxplay.c rudl-0.8-patched//flxplay.c
--- rudl-0.8/flxplay.c	2004-10-24 00:40:26.000000000 +0200
+++ rudl-0.8-patched//flxplay.c	2010-09-02 10:10:35.000000000 +0200
@@ -42,10 +42,9 @@
   int lastFrameTicks;
 } FLC;
 
-#define ReadU16(tmp1, tmp2) (Uint16)*(tmp1) = ((Uint8)*(tmp2+1)<<8)+(Uint8)*(tmp2);
-#define ReadU32(tmp1, tmp2) (Uint32)*(tmp1) = (((((((Uint8)*(tmp2+3)<<8)+((Uint8)*(tmp2+2)))<<8)+((Uint8)*(tmp2+1)))<<8)+(Uint8)*(tmp2));
-
+#define ReadU16(tmp1, tmp2) *(Uint16 *)(tmp1) = ((Uint8)*(tmp2+1)<<8)+(Uint8)*(tmp2);
 
+#define ReadU32(tmp1, tmp2) *(Uint32 *)(tmp1) = (((((((Uint8)*(tmp2+3)<<8)+((Uint8)*(tmp2+2)))<<8)+((Uint8)*(tmp2+1)))<<8)+(Uint8)*(tmp2));
 
 void FlcReadFile(FLC*flc, Uint32 size)
 { 
@@ -541,7 +540,7 @@
 
 static VALUE flc_decoder_new(VALUE clas, VALUE filename)
 {
-	return createFLCObject(STR2CSTR(filename));
+	return createFLCObject(StringValuePtr(filename));
 }
 
 static VALUE flc_decoder_destroy(VALUE self)
diff -aur rudl-0.8/rudl.c rudl-0.8-patched//rudl.c
--- rudl-0.8/rudl.c	2004-10-24 00:40:26.000000000 +0200
+++ rudl-0.8-patched//rudl.c	2010-09-02 10:10:35.000000000 +0200
@@ -104,7 +104,7 @@
     VALUE tmp;
 
     if(rb_obj_is_kind_of(flagsArg, rb_cArray)){
-        for(i=0; i<RARRAY(flagsArg)->len; i++){
+        for(i=0; i<RARRAY_LEN(flagsArg); i++){
             tmp=rb_ary_entry(flagsArg, i);
             flags|=NUM2UINT(tmp);
         }
diff -aur rudl-0.8/rudl_audio.c rudl-0.8-patched//rudl_audio.c
--- rudl-0.8/rudl_audio.c	2004-10-24 00:40:26.000000000 +0200
+++ rudl-0.8-patched//rudl_audio.c	2010-09-02 10:10:35.000000000 +0200
@@ -305,7 +305,7 @@
 
     initAudio();
 
-    chunk=Mix_LoadWAV(STR2CSTR(filename));
+    chunk=Mix_LoadWAV(StringValuePtr(filename));
     SDL_VERIFY(chunk);
 
     newObject=Data_Wrap_Struct(classSound, 0, SDL_FreeWAV, chunk);
@@ -333,10 +333,10 @@
     Check_Type(sampledata, T_STRING);
 
     chunk->allocated = 0;
-    chunk->alen = RSTRING(sampledata)->len;
+    chunk->alen = RSTRING_LEN(sampledata);
     chunk->abuf = malloc(chunk->alen);
     chunk->volume = MIX_MAX_VOLUME;
-    memcpy(chunk->abuf, RSTRING(sampledata)->ptr, chunk->alen);
+    memcpy(chunk->abuf, RSTRING_PTR(sampledata), chunk->alen);
 
     newObject=Data_Wrap_Struct(classSound, 0, SDL_FreeWAV, chunk);
     RUDL_VERIFY(newObject, "Sound.load_raw misbehaved");
@@ -396,8 +396,8 @@
         }
     }
 
-    src_memory=RSTRING(src)->ptr;
-    src_length=RSTRING(src)->len;
+    src_memory=RSTRING_PTR(src);
+    src_length=RSTRING_LEN(src);
 
     unpack_audio_format_array(src_array, &src_rate, &src_format, &src_channels);
     unpack_audio_format_array(dest_array, &dest_rate, &dest_format, &dest_channels);
@@ -423,7 +423,7 @@
 
 {
     char* new_sound=(char*)calloc(to_length, sizeof(char));
-    memcpy(new_sound, RSTRING(input)->ptr, RSTRING(input)->len);
+    memcpy(new_sound, RSTRING_PTR(input), RSTRING_LEN(input));
     return new_sound;
 }
 
@@ -438,15 +438,15 @@
     }
     Check_Type(v_data1, T_STRING);
     Check_Type(v_data2, T_STRING);
-    *data1=RSTRING(v_data1)->len;
-    *data2=RSTRING(v_data2)->len;
+    *data1=RSTRING_LEN(v_data1);
+    *data2=RSTRING_LEN(v_data2);
 
-    if(RSTRING(v_data1)->len > RSTRING(v_data2)->len){
-        data2=sound_pad(v_data2, RSTRING(v_data1)->len);
+    if(RSTRING_LEN(v_data1) > RSTRING_LEN(v_data2)){
+        data2=sound_pad(v_data2, RSTRING_LEN(v_data1));
     }
 
-    if(RSTRING(v_data1)->len < RSTRING(v_data2)->len){
-        data1=sound_pad(v_data1, RSTRING(v_data2)->len);
+    if(RSTRING_LEN(v_data1) < RSTRING_LEN(v_data2)){
+        data1=sound_pad(v_data1, RSTRING_LEN(v_data2));
     }
 Kopieer sdl_mixer.c
 
@@ -466,7 +466,7 @@
 
     initAudio();
 
-    rwops=SDL_RWFromMem(RSTRING(self)->ptr, RSTRING(self)->len);
+    rwops=SDL_RWFromMem(RSTRING_PTR(self), RSTRING_LEN(self));
     chunk=Mix_LoadWAV_RW(rwops, 0);
     SDL_FreeRW(rwops);
     SDL_VERIFY(chunk);
@@ -855,7 +855,7 @@
 {
     VALUE newObject;
     initAudio();
-    newObject=Data_Wrap_Struct(classMusic, 0, freemusic, Mix_LoadMUS(STR2CSTR(filename)));
+    newObject=Data_Wrap_Struct(classMusic, 0, freemusic, Mix_LoadMUS(StringValuePtr(filename)));
     rb_obj_call_init(newObject, 0, NULL);
     return newObject;
 }
diff -aur rudl-0.8/rudl_mouse.c rudl-0.8-patched//rudl_mouse.c
--- rudl-0.8/rudl_mouse.c	2004-10-24 00:40:26.000000000 +0200
+++ rudl-0.8-patched//rudl_mouse.c	2010-09-02 10:10:35.000000000 +0200
@@ -119,9 +119,9 @@
 
 	Check_Type(xormasks, T_ARRAY);
 	Check_Type(andmasks, T_ARRAY);
-	sx=RARRAY(rb_ary_entry(xormasks,0))->len;
-	sy=RARRAY(xormasks)->len;
-	if((sx!=RARRAY(rb_ary_entry(andmasks,0))->len)||(sy!=RARRAY(xormasks)->len)){
+	sx=RARRAY_LEN(rb_ary_entry(xormasks,0));
+	sy=RARRAY_LEN(xormasks);
+	if((sx!=RARRAY_LEN(rb_ary_entry(andmasks,0)))||(sy!=RARRAY_LEN(xormasks))){
 		SDL_RAISE_S("andmasks and xormasks should be the same size");
 	}
 
diff -aur rudl-0.8/rudl_movie.c rudl-0.8-patched//rudl_movie.c
--- rudl-0.8/rudl_movie.c	2004-10-24 00:40:26.000000000 +0200
+++ rudl-0.8-patched//rudl_movie.c	2010-09-02 10:10:35.000000000 +0200
@@ -73,7 +73,7 @@
 {
 	//init_smpeg();
 	BIGSMPEG* smpeg=(BIGSMPEG*)malloc(sizeof(BIGSMPEG));
-	smpeg->movie=SMPEG_new(STR2CSTR(filename), &(smpeg->info), true);
+	smpeg->movie=SMPEG_new(StringValuePtr(filename), &(smpeg->info), true);
 	movie_check_error(smpeg);
 	return Data_Wrap_Struct(classMovie, 0, delete_BIGSMPEG, smpeg);
 }
@@ -149,13 +149,13 @@
 
 
 
-  mpeg = SMPEG_new(STR2CSTR(filename),NULL,SDL_WasInit(SDL_INIT_AUDIO));
+  mpeg = SMPEG_new(StringValuePtr(filename),NULL,SDL_WasInit(SDL_INIT_AUDIO));
 
   if( SMPEG_error(mpeg) ){
 
     snprintf(error_msg,sizeof(error_msg),"Couldn't load %s: %s",
 
-	     STR2CSTR(filename),SMPEG_error(mpeg));
+	     StringValuePtr(filename),SMPEG_error(mpeg));
 
     SMPEG_delete(mpeg);
 
diff -aur rudl-0.8/rudl_sfont.c rudl-0.8-patched//rudl_sfont.c
--- rudl-0.8/rudl_sfont.c	2004-10-24 00:40:26.000000000 +0200
+++ rudl-0.8-patched//rudl_sfont.c	2010-09-02 10:10:35.000000000 +0200
@@ -113,7 +113,7 @@
 {
 	Sint16 x,y;
 	PARAMETER2COORD(coord, &x, &y);
-	PutString(retrieveSurfacePointer(surface), retrieveFontInfoPointer(self), x, y, STR2CSTR(text));
+	PutString(retrieveSurfacePointer(surface), retrieveFontInfoPointer(self), x, y, StringValuePtr(text));
 	return self;
 }
 
@@ -140,7 +140,7 @@
 static VALUE sfont_size(VALUE self, VALUE ruby_text)
 {
 	SFont_FontInfo* font=retrieveFontInfoPointer(self);
-	char* text=STR2CSTR(ruby_text);
+	char* text=StringValuePtr(ruby_text);
 	int ofs=0;
 	int i=0,x=0;
 
diff -aur rudl-0.8/rudl_ttf.c rudl-0.8-patched//rudl_ttf.c
--- rudl-0.8/rudl_ttf.c	2004-10-24 00:40:26.000000000 +0200
+++ rudl-0.8-patched//rudl_ttf.c	2010-09-02 10:10:35.000000000 +0200
@@ -54,7 +54,7 @@
 
     VALUE tmp;
     if(rb_obj_is_kind_of(colorObject, rb_cArray)){
-        switch(RARRAY(colorObject)->len){
+        switch(RARRAY_LEN(colorObject)){
             case 4:
             case 3:
 
@@ -89,7 +89,7 @@
 {
     TTF_Font *font;
     initTTF();
-    font=TTF_OpenFont(STR2CSTR(filename), NUM2INT(size));
+    font=TTF_OpenFont(StringValuePtr(filename), NUM2INT(size));
     if(!font)TTF_RAISE;
     return Data_Wrap_Struct(classTTF, 0, TTF_CloseFont, font);
 }
@@ -128,7 +128,7 @@
 
     aa=NUM2BOOL(aaValue);
 
-    string=STR2CSTR(textValue);
+    string=StringValuePtr(textValue);
     if(aa){
         if(argc==3){
             surf = TTF_RenderText_Blended(font, string, foreg);
@@ -278,7 +278,7 @@
 static VALUE truetypefont_size(VALUE self, VALUE text)
 {
     int w, h;
-    TTF_SizeText(retrieveTTFPointer(self), STR2CSTR(text), &w, &h);
+    TTF_SizeText(retrieveTTFPointer(self), StringValuePtr(text), &w, &h);
     return rb_ary_new3(2, INT2NUM(w), INT2NUM(h));
 }
 #endif
diff -aur rudl-0.8/rudl_video.c rudl-0.8-patched//rudl_video.c
--- rudl-0.8/rudl_video.c	2004-10-24 00:40:26.000000000 +0200
+++ rudl-0.8-patched//rudl_video.c	2010-09-02 10:10:35.000000000 +0200
@@ -32,7 +32,7 @@
 {
     VALUE r,g,b,a;
     if(rb_obj_is_kind_of(colorObject, rb_cArray)){
-        switch(RARRAY(colorObject)->len){
+        switch(RARRAY_LEN(colorObject)){
             case 3:
                 r=rb_ary_entry(colorObject, 0);
                 g=rb_ary_entry(colorObject, 1);
@@ -65,7 +65,7 @@
 {
     if(rb_obj_is_kind_of(colorObject, rb_cArray)){
         VALUE r,g,b,a;
-        switch(RARRAY(colorObject)->len){
+        switch(RARRAY_LEN(colorObject)){
             case 3:
                 r=rb_ary_entry(colorObject, 0);
                 g=rb_ary_entry(colorObject, 1);
diff -aur rudl-0.8/rudl_video_display_surface.c rudl-0.8-patched//rudl_video_display_surface.c
--- rudl-0.8/rudl_video_display_surface.c	2004-10-24 00:40:26.000000000 +0200
+++ rudl-0.8-patched//rudl_video_display_surface.c	2010-09-02 10:10:35.000000000 +0200
@@ -393,7 +393,7 @@
             return self;
         case 1:
             Check_Type(rectObject, T_ARRAY);
-            total_rects=RARRAY(rectObject)->len;
+            total_rects=RARRAY_LEN(rectObject);
             rects=malloc(sizeof(SDL_Rect)*total_rects);
             for(i=0; i<total_rects; i++){
                 PARAMETER2CRECT(rb_ary_entry(rectObject, i), rects+i);
@@ -462,10 +462,10 @@
     rb_scan_args(argc, argv, "11", &titleObject, &iconTitleObject);
 
     if(argc==2){
-        iconTitle=STR2CSTR(iconTitleObject);
+        iconTitle=StringValuePtr(iconTitleObject);
     }
 
-    title=STR2CSTR(titleObject);
+    title=StringValuePtr(titleObject);
 
     SDL_WM_SetCaption(title, iconTitle);
 
@@ -516,8 +516,8 @@
     /* custom mask supplied? */
     if (argc == 2) {
         if (mask != Qnil) {
-            RUDL_VERIFY(RSTRING(mask)->len >= surface->h*((surface->w + 7)/8), "Not enough data in mask_string");
-            maskstr = STR2CSTR(mask);
+            RUDL_VERIFY(RSTRING_LEN(mask) >= surface->h*((surface->w + 7)/8), "Not enough data in mask_string");
+            maskstr = StringValuePtr(mask);
         }
     /* colorkey set? generate a working mask, unlike SDL currently :) */
     } else if (surface->flags & SDL_SRCCOLORKEY) {
@@ -574,7 +574,7 @@
     VALUE tmp;
 
     if(rb_obj_is_kind_of(color, rb_cArray)){
-        if(RARRAY(color)->len==3){
+        if(RARRAY_LEN(color)==3){
             tmp=rb_ary_entry(color, 0);     r=NUM2FLT(tmp);
             tmp=rb_ary_entry(color, 1);     g=NUM2FLT(tmp);
             tmp=rb_ary_entry(color, 2);     b=NUM2FLT(tmp);
diff -aur rudl-0.8/rudl_video_rect.c rudl-0.8-patched//rudl_video_rect.c
--- rudl-0.8/rudl_video_rect.c	2004-10-24 00:40:26.000000000 +0200
+++ rudl-0.8-patched//rudl_video_rect.c	2010-09-02 10:10:35.000000000 +0200
@@ -173,8 +173,8 @@
 	Check_Type(list1Value, T_ARRAY);
 	Check_Type(list2Value, T_ARRAY);
 
-	list1len=RARRAY(list1Value)->len;
-	list2len=RARRAY(list2Value)->len;
+	list1len=RARRAY_LEN(list1Value);
+	list2len=RARRAY_LEN(list2Value);
 
 	if(list1len==0 || list2len==0) return self;
 
@@ -226,7 +226,7 @@
 	double l,r,t,b;
 	VALUE rect;
 
-	if(RARRAY(other_rects)->len==0){
+	if(RARRAY_LEN(other_rects)==0){
 		return Qnil;
 	}
 
@@ -236,7 +236,7 @@
 	top=array_get_y(rect);
 	bottom=array_get_h(rect)+top;
 
-	for(i=1; i<RARRAY(other_rects)->len; i++){
+	for(i=1; i<RARRAY_LEN(other_rects); i++){
 		rect=rb_ary_entry(other_rects, i);
 		l=array_get_x(rect);
 		r=array_get_w(rect)+l;
@@ -437,7 +437,7 @@
 	x2=array_get_x(thing);
 	y2=array_get_y(thing);
 
-	if(RARRAY(thing)->len>3){ // It's a rectangle
+	if(RARRAY_LEN(thing)>3){ // It's a rectangle
 		w2=array_get_w(thing);
 		h2=array_get_h(thing);
 		return INT2BOOL((x <= x2) && (y <= y2) &&
@@ -514,7 +514,7 @@
 {
 	int i;
 	Check_Type(rects, T_ARRAY);
-	for(i=0; i<RARRAY(rects)->len; i++){
+	for(i=0; i<RARRAY_LEN(rects); i++){
 		if(rb_array_overlaps(self, rb_ary_entry(rects, i))==Qtrue){
 			return rb_ary_entry(rects, i);
 		}
@@ -531,7 +531,7 @@
 	int i;
 	VALUE retval=rb_ary_new();
 	Check_Type(rects, T_ARRAY);
-	for(i=0; i<RARRAY(rects)->len; i++){
+	for(i=0; i<RARRAY_LEN(rects); i++){
 		if(rb_array_overlaps(self, rb_ary_entry(rects, i))==Qtrue){
 			rb_ary_push(retval, rb_ary_entry(rects, i));
 		}
diff -aur rudl-0.8/rudl_video_sdl_gfx.c rudl-0.8-patched//rudl_video_sdl_gfx.c
--- rudl-0.8/rudl_video_sdl_gfx.c	2004-10-24 00:40:26.000000000 +0200
+++ rudl-0.8-patched//rudl_video_sdl_gfx.c	2010-09-02 10:10:35.000000000 +0200
@@ -259,7 +259,7 @@
 */
 static VALUE surface_polygon(VALUE self, VALUE coordlist, VALUE color)
 {
-    int numpoints=RARRAY(coordlist)->len;
+    int numpoints=RARRAY_LEN(coordlist);
     Sint16 *x=malloc(sizeof(Sint16)*numpoints);
     Sint16 *y=malloc(sizeof(Sint16)*numpoints);
     int i;
@@ -280,7 +280,7 @@
 /** @method filled_polygon( coord_list, color ) -> self */
 static VALUE surface_filled_polygon(VALUE self, VALUE coordlist, VALUE color)
 {
-    int numpoints=RARRAY(coordlist)->len;
+    int numpoints=RARRAY_LEN(coordlist);
     Sint16 *x=malloc(sizeof(Sint16)*numpoints);
     Sint16 *y=malloc(sizeof(Sint16)*numpoints);
     int i;
@@ -302,7 +302,7 @@
 */
 static VALUE surface_antialiased_polygon(VALUE self, VALUE coordlist, VALUE color)
 {
-    int numpoints=RARRAY(coordlist)->len;
+    int numpoints=RARRAY_LEN(coordlist);
     Sint16 *x=malloc(sizeof(Sint16)*numpoints);
     Sint16 *y=malloc(sizeof(Sint16)*numpoints);
     int i;
@@ -329,7 +329,7 @@
 {
     Sint16 x,y;
     PARAMETER2COORD(coord, &x, &y);
-    if(stringColor(retrieveSurfacePointer(self), x, y, STR2CSTR(text), VALUE2COLOR_NOMAP(color))) SDL_RAISE_S("failed");
+    if(stringColor(retrieveSurfacePointer(self), x, y, StringValuePtr(text), VALUE2COLOR_NOMAP(color))) SDL_RAISE_S("failed");
     return self;
 }
 #endif
diff -aur rudl-0.8/rudl_video_surface.c rudl-0.8-patched//rudl_video_surface.c
--- rudl-0.8/rudl_video_surface.c	2004-10-24 00:40:26.000000000 +0200
+++ rudl-0.8-patched//rudl_video_surface.c	2010-09-02 10:10:35.000000000 +0200
@@ -215,7 +215,7 @@
                     bpp = NUM2Sint16(surfaceOrDepthObject);
                     if(argc == 4){  // got masks
                         Check_Type(masksObject, T_ARRAY);
-                        RUDL_VERIFY(RARRAY(masksObject)->len==4, "Need 4 elements in masks array");
+                        RUDL_VERIFY(RARRAY_LEN(masksObject)==4, "Need 4 elements in masks array");
                         tmp = rb_ary_entry(masksObject, 0);   Rmask = NUM2UINT(tmp);
                         tmp = rb_ary_entry(masksObject, 1);   Gmask = NUM2UINT(tmp);
                         tmp = rb_ary_entry(masksObject, 2);   Bmask = NUM2UINT(tmp);
@@ -274,9 +274,9 @@
     SDL_Surface* surface=NULL;
     initVideo();
 #ifdef HAVE_SDL_IMAGE_H
-    surface=IMG_Load(STR2CSTR(filename));
+    surface=IMG_Load(StringValuePtr(filename));
 #else
-    surface=SDL_LoadBMP(STR2CSTR(filename));
+    surface=SDL_LoadBMP(StringValuePtr(filename));
 #endif
     if(!surface) SDL_RAISE;
     return createSurfaceObject(surface);
@@ -296,7 +296,7 @@
 
     initVideo();
 
-    rwops=SDL_RWFromMem(RSTRING(self)->ptr, RSTRING(self)->len);
+    rwops=SDL_RWFromMem(RSTRING_PTR(self), RSTRING_LEN(self));
 
 #ifdef HAVE_SDL_IMAGE_H
     surface=IMG_Load_RW(rwops, 0);
@@ -558,7 +558,7 @@
 */
 static VALUE surface_save_bmp(VALUE self, VALUE filename)
 {
-    if(SDL_SaveBMP(retrieveSurfacePointer(self), STR2CSTR(filename))==-1) SDL_RAISE;
+    if(SDL_SaveBMP(retrieveSurfacePointer(self), StringValuePtr(filename))==-1) SDL_RAISE;
     return self;
 }
 
@@ -827,7 +827,7 @@
 
     RUDL_VERIFY(rb_obj_is_kind_of(colors, rb_cArray), "Need array of colors");
 
-    amount=RARRAY(colors)->len;
+    amount=RARRAY_LEN(colors);
 
     if (!pal) return Qfalse;
 
@@ -1117,10 +1117,10 @@
 
     RUDL_VERIFY(y >= 0 && y < surface->h, "coordinate out of bounds");
 
-    RUDL_ASSERT(RSTRING(pixels)->len >= surface->w*surface->format->BytesPerPixel, "Not enough data for a complete row");
+    RUDL_ASSERT(RSTRING_LEN(pixels) >= surface->w*surface->format->BytesPerPixel, "Not enough data for a complete row");
 
     SDL_LockSurface(surface);
-    copy_line_to_surface(surface, y, RSTRING(pixels)->ptr);
+    copy_line_to_surface(surface, y, RSTRING_PTR(pixels));
     SDL_UnlockSurface(surface);
     return self;
 }
@@ -1220,7 +1220,7 @@
     SDL_LockSurface(surface);
 
     dest = ((Uint8*) surface->pixels) + x*pixelsize;
-    src = RSTRING(pixels)->ptr;
+    src = RSTRING_PTR(pixels);
 
     for (y=0; y<h; y++) {
         memcpy(dest, src, pixelsize);
@@ -1302,9 +1302,9 @@
 
     Check_Type(pixels, T_STRING);
     size=surface->w*surface->h*surface->format->BytesPerPixel;
-    pixelpointer=RSTRING(pixels)->ptr;
+    pixelpointer=RSTRING_PTR(pixels);
 
-    RUDL_ASSERT(RSTRING(pixels)->len>=size, "Not enough data in string");
+    RUDL_ASSERT(RSTRING_LEN(pixels)>=size, "Not enough data in string");
 
     if(surface->pitch==surface->w){
         memcpy(surface->pixels, pixelpointer, size);
